plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = "com.board.notice"
version = "0.0.1"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    queryDslVer = "5.0.0"
    jsonSimpleVer = "1.1.1"
    webClient = "3.2.4"
    mysqlCon = "8.0.32"
    undertowVer = "2.6.3"
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-aop"

    implementation "com.googlecode.json-simple:json-simple:${jsonSimpleVer}"
    implementation "org.apache.commons:commons-lang3"

    //QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVer}:jakarta"
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties["querydsl.version"]}:jakarta")
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "com.fasterxml.jackson.core:jackson-core"
    annotationProcessor "com.fasterxml.jackson.core:jackson-databind"
    annotationProcessor "com.fasterxml.jackson.core:jackson-annotations"

    // MySql
    implementation "mysql:mysql-connector-java:${mysqlCon}"

    // Web Client
    implementation "org.springframework.boot:spring-boot-starter-web:${webClient}"

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

def querydslSrcDir = "src/main/generated"
sourceSets {
    main {
        java {
            srcDirs += [querydslSrcDir]
        }
    }
}

compileJava {
    options.compilerArgs << "-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated"
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
    delete file(querydslSrcDir)
}

tasks.named("test") {
    useJUnitPlatform()
}